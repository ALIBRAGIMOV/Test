{"ast":null,"code":"var _jsxFileName = \"/Users/ali/Documents/roseltorg/src/App.js\";\nimport React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport HideAppBar from \"./components/AppBar\";\nimport CityCard from \"./components/CityCard\";\nimport Grid from \"@material-ui/core/Grid\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Card from \"@material-ui/core/Card\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Modal from \"@material-ui/core/Modal\";\nimport Backdrop from \"@material-ui/core/Backdrop\";\nimport Fade from \"@material-ui/core/Fade\";\nconst useStyles = makeStyles(theme => ({\n  root: {\n    minWidth: 275,\n    maxWidth: 290,\n    cursor: \"pointer\",\n    marginTop: 20,\n    borderRadius: 12,\n    boxShadow: \"0 10px 45px rgba(0,0,0,.08), 0 5px 10px rgba(0,0,0,.05)\"\n  },\n  bullet: {\n    display: \"inline-block\",\n    margin: \"0 2px\",\n    transform: \"scale(0.8)\"\n  },\n  title: {\n    fontSize: 14\n  },\n  pos: {\n    marginBottom: 12\n  },\n  modal: {\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\"\n  },\n  paper: {\n    backgroundColor: theme.palette.background.paper,\n    border: \"1px solid #48484A\",\n    borderRadius: 4,\n    maxWidth: 1000,\n    boxShadow: theme.shadows[5],\n    outline: \"none\"\n  },\n  modalCard: {\n    width: 420,\n    boxShadow: \"0 10px 45px rgba(0,0,0,.08), 0 5px 10px rgba(0,0,0,.05)\"\n  }\n}));\n\nfunction App() {\n  const [moscow, setMoscow] = useState({\n    datasm: []\n  });\n  const {\n    datasm\n  } = moscow;\n\n  const getWeatherMoscow = async () => {\n    const api = await fetch(`http://api.openweathermap.org/data/2.5/weather?q=moscow&appid=62029f0d3701271a5e50142b280915f0\n`);\n    const forecastapi = await fetch(`https://api.openweathermap.org/data/2.5/forecast?q=moscow&units=metric&appid=62029f0d3701271a5e50142b280915f0`);\n    const datafore = await forecastapi.json();\n    const data = await api.json();\n    setMoscow({ ...moscow,\n      datasm: data,\n      datafm: datafore,\n      temp: data.main.temp,\n      sky: data.weather[0].description,\n      icon: data.weather[0].icon\n    });\n    console.log(data);\n  };\n\n  const [london, setLondon] = useState({\n    datasl: [],\n    templ: [],\n    skyl: [],\n    icon: '',\n    timel: ''\n  });\n  const {\n    datasl,\n    templ,\n    skyl,\n    iconl,\n    timel\n  } = london;\n\n  const getWeatherLondon = async () => {\n    const api = await fetch(`http://api.openweathermap.org/data/2.5/weather?q=london&appid=62029f0d3701271a5e50142b280915f0\n`);\n    const forecastapi = await fetch(`https://api.openweathermap.org/data/2.5/forecast?q=moscow&units=metric&appid=62029f0d3701271a5e50142b280915f0`);\n    const data = await api.json();\n    const datafore = await forecastapi.json();\n    setLondon({ ...london,\n      datasl: data,\n      datafl: datafore.list.slice(0, 5).map(item => /*#__PURE__*/React.createElement(\"a\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 55\n        }\n      }, item.main.temp)),\n      templ: data.main.temp,\n      skyl: data.weather[0].description,\n      iconl: data.weather[0].icon\n    });\n    console.log(data);\n  };\n\n  const [paris, setParis] = useState({\n    datasp: [],\n    datafp: [],\n    temp: [],\n    sky: [],\n    icon: \"\",\n    time: \"\"\n  });\n  const {\n    datasp,\n    datafp,\n    temp,\n    sky,\n    icon,\n    time\n  } = paris;\n  useEffect(() => {\n    getWeatherParis();\n    getWeatherMoscow();\n    getWeatherLondon();\n  }, []);\n\n  const getWeatherParis = async () => {\n    const api = await fetch(`http://api.openweathermap.org/data/2.5/weather?q=sydney&appid=62029f0d3701271a5e50142b280915f0\n`);\n    const forecastapi = await fetch(`https://api.openweathermap.org/data/2.5/forecast?q=moscow&units=metric&appid=62029f0d3701271a5e50142b280915f0`);\n    const data = await api.json();\n    const datafore = await forecastapi.json();\n    setParis({ ...paris,\n      datasp: data,\n      datafp: datafore.list,\n      temp: data.main.temp,\n      sky: data.weather[0].description,\n      icon: data.weather[0].icon,\n      time: data.dt\n    });\n    console.log(data);\n  };\n\n  const classes = useStyles();\n  const [open, setOpen] = React.useState(false);\n\n  const handleOpen = () => {\n    setOpen(true);\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  const cels = Math.round(temp - 273.16);\n  const celsl = Math.round(templ - 273.16);\n\n  const timeCity = times => {\n    let a = new Date(times * 1000);\n    let months = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"];\n    let year = a.getFullYear();\n    let month = months[a.getMonth()];\n    let date = a.getDate();\n    let hour = a.getHours();\n    let min = a.getMinutes();\n    let sec = a.getSeconds();\n    let time = date + \" \" + month + \" \" + year + \" \" + hour + \":\" + min + \":\" + sec;\n    return time;\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"App\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 201,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"header\", {\n    className: \"App-header\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 202,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(HideAppBar, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 203,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"Layout\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 206,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    direction: \"row\",\n    justify: \"center\",\n    alignItems: \"center\",\n    spacing: 7,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 207,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 214,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Card, {\n    className: classes.root,\n    onClick: handleOpen,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 215,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(CardContent, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 216,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    className: classes.title,\n    color: \"textSecondary\",\n    gutterBottom: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 217,\n      columnNumber: 17\n    }\n  }, \"Current weather in\"), /*#__PURE__*/React.createElement(Typography, {\n    variant: \"h5\",\n    component: \"h2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 224,\n      columnNumber: 17\n    }\n  }, paris.datasp.name), /*#__PURE__*/React.createElement(\"img\", {\n    src: `http://openweathermap.org/img/w/${icon}.png`,\n    alt: \"icon\",\n    width: \"60\",\n    height: \"50\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 228,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(Typography, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 234,\n      columnNumber: 17\n    }\n  }, \"Temperature: \", cels, \"\\u2103\"), /*#__PURE__*/React.createElement(Typography, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 235,\n      columnNumber: 17\n    }\n  }, \"Description: \", sky))), /*#__PURE__*/React.createElement(Modal, {\n    \"aria-labelledby\": \"transition-modal-title\",\n    \"aria-describedby\": \"transition-modal-description\",\n    className: classes.modal,\n    open: open,\n    onClose: handleClose,\n    closeAfterTransition: true,\n    BackdropComponent: Backdrop,\n    BackdropProps: {\n      timeout: 500\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 238,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Fade, {\n    in: open,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 250,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.paper,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 251,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Card, {\n    className: classes.modalCard,\n    onClick: handleOpen,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 252,\n      columnNumber: 19\n    }\n  }, /*#__PURE__*/React.createElement(CardContent, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 253,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    className: classes.title,\n    color: \"textSecondary\",\n    gutterBottom: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 254,\n      columnNumber: 23\n    }\n  }, \"More weather information\", \" \"), /*#__PURE__*/React.createElement(Typography, {\n    variant: \"h5\",\n    component: \"h2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 261,\n      columnNumber: 23\n    }\n  }, paris.datasp.name), /*#__PURE__*/React.createElement(Typography, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 264,\n      columnNumber: 23\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    direction: \"row\",\n    spacing: 2,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 265,\n      columnNumber: 25\n    }\n  }, paris.datafp.slice(0, 4).map(item => /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 267,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      marginTop: 20,\n      marginLeft: 15,\n      borderRadius: 12,\n      width: 160,\n      boxShadow: \"0 10px 45px rgba(0,0,0,.08), 0 5px 10px rgba(0,0,0,.05)\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 268,\n      columnNumber: 31\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    variant: \"h6\",\n    gutterBottom: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 278,\n      columnNumber: 33\n    }\n  }, timeCity(item.dt), \" \", /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 279,\n      columnNumber: 55\n    }\n  })), /*#__PURE__*/React.createElement(Typography, {\n    variant: \"subtitle2\",\n    gutterBottom: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 281,\n      columnNumber: 33\n    }\n  }, \"Temp: \", item.main.temp, \"\\u2103\"), /*#__PURE__*/React.createElement(\"img\", {\n    src: `http://openweathermap.org/img/w/${item.weather[0].icon}.png`,\n    alt: \"icon\",\n    width: \"60\",\n    height: \"50\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 284,\n      columnNumber: 33\n    }\n  }), /*#__PURE__*/React.createElement(Typography, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 290,\n      columnNumber: 33\n    }\n  }, \"Weather description :\"), item.weather[0].description))))))))))), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 303,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Card, {\n    className: classes.root,\n    onClick: handleOpen,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 304,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(CardContent, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 305,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    className: classes.title,\n    color: \"textSecondary\",\n    gutterBottom: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 306,\n      columnNumber: 17\n    }\n  }, \"Current weather in\"), /*#__PURE__*/React.createElement(Typography, {\n    variant: \"h5\",\n    component: \"h2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 313,\n      columnNumber: 17\n    }\n  }, london.datasl.name), /*#__PURE__*/React.createElement(\"img\", {\n    src: `http://openweathermap.org/img/w/${iconl}.png`,\n    alt: \"icon\",\n    width: \"60\",\n    height: \"50\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 317,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(Typography, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 323,\n      columnNumber: 17\n    }\n  }, \"Temperature: \", celsl, \"\\u2103\"), /*#__PURE__*/React.createElement(Typography, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 324,\n      columnNumber: 17\n    }\n  }, \"Description: \", skyl))), /*#__PURE__*/React.createElement(Modal, {\n    \"aria-labelledby\": \"transition-modal-title\",\n    \"aria-describedby\": \"transition-modal-description\",\n    className: classes.modal,\n    open: open,\n    onClose: handleClose,\n    closeAfterTransition: true,\n    BackdropComponent: Backdrop,\n    BackdropProps: {\n      timeout: 500\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 327,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Fade, {\n    in: open,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 339,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.paper,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 340,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Card, {\n    className: classes.modalCard,\n    onClick: handleOpen,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 341,\n      columnNumber: 19\n    }\n  }, /*#__PURE__*/React.createElement(CardContent, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 342,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    className: classes.title,\n    color: \"textSecondary\",\n    gutterBottom: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 343,\n      columnNumber: 23\n    }\n  }, \"More weather information\", \" \"), /*#__PURE__*/React.createElement(Typography, {\n    variant: \"h5\",\n    component: \"h2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 350,\n      columnNumber: 23\n    }\n  }, paris.datasp.name), /*#__PURE__*/React.createElement(Typography, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 353,\n      columnNumber: 23\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    direction: \"row\",\n    spacing: 2,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 354,\n      columnNumber: 25\n    }\n  }, paris.datafp.slice(0, 4).map(item => /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 356,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      marginTop: 20,\n      marginLeft: 15,\n      borderRadius: 12,\n      width: 160,\n      boxShadow: \"0 10px 45px rgba(0,0,0,.08), 0 5px 10px rgba(0,0,0,.05)\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 357,\n      columnNumber: 31\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    variant: \"h6\",\n    gutterBottom: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 367,\n      columnNumber: 33\n    }\n  }, timeCity(item.dt), \" \", /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 368,\n      columnNumber: 55\n    }\n  })), /*#__PURE__*/React.createElement(Typography, {\n    variant: \"subtitle2\",\n    gutterBottom: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 370,\n      columnNumber: 33\n    }\n  }, \"Temp: \", item.main.temp, \"\\u2103\"), /*#__PURE__*/React.createElement(\"img\", {\n    src: `http://openweathermap.org/img/w/${item.weather[0].icon}.png`,\n    alt: \"icon\",\n    width: \"60\",\n    height: \"50\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 373,\n      columnNumber: 33\n    }\n  }), /*#__PURE__*/React.createElement(Typography, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 379,\n      columnNumber: 33\n    }\n  }, \"Weather description :\"), item.weather[0].description))))))))))), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 392,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Card, {\n    className: classes.root,\n    onClick: handleOpen,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 393,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(CardContent, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 394,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    className: classes.title,\n    color: \"textSecondary\",\n    gutterBottom: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 395,\n      columnNumber: 17\n    }\n  }, \"Current weather in\"), /*#__PURE__*/React.createElement(Typography, {\n    variant: \"h5\",\n    component: \"h2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 402,\n      columnNumber: 17\n    }\n  }, paris.datasp.name), /*#__PURE__*/React.createElement(\"img\", {\n    src: `http://openweathermap.org/img/w/${icon}.png`,\n    alt: \"icon\",\n    width: \"60\",\n    height: \"50\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 406,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(Typography, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 412,\n      columnNumber: 17\n    }\n  }, \"Temperature: \", cels, \"\\u2103\"), /*#__PURE__*/React.createElement(Typography, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 413,\n      columnNumber: 17\n    }\n  }, \"Description: \", sky))), /*#__PURE__*/React.createElement(Modal, {\n    \"aria-labelledby\": \"transition-modal-title\",\n    \"aria-describedby\": \"transition-modal-description\",\n    className: classes.modal,\n    open: open,\n    onClose: handleClose,\n    closeAfterTransition: true,\n    BackdropComponent: Backdrop,\n    BackdropProps: {\n      timeout: 500\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 416,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Fade, {\n    in: open,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 428,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.paper,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 429,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Card, {\n    className: classes.modalCard,\n    onClick: handleOpen,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 430,\n      columnNumber: 19\n    }\n  }, /*#__PURE__*/React.createElement(CardContent, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 431,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    className: classes.title,\n    color: \"textSecondary\",\n    gutterBottom: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 432,\n      columnNumber: 23\n    }\n  }, \"More weather information\", \" \"), /*#__PURE__*/React.createElement(Typography, {\n    variant: \"h5\",\n    component: \"h2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 439,\n      columnNumber: 23\n    }\n  }, paris.datasp.name), /*#__PURE__*/React.createElement(Typography, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 442,\n      columnNumber: 23\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    direction: \"row\",\n    spacing: 2,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 443,\n      columnNumber: 25\n    }\n  }, paris.datafp.slice(0, 4).map(item => /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 445,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      marginTop: 20,\n      marginLeft: 15,\n      borderRadius: 12,\n      width: 160,\n      boxShadow: \"0 10px 45px rgba(0,0,0,.08), 0 5px 10px rgba(0,0,0,.05)\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 446,\n      columnNumber: 31\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    variant: \"h6\",\n    gutterBottom: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 456,\n      columnNumber: 33\n    }\n  }, timeCity(item.dt), \" \", /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 457,\n      columnNumber: 55\n    }\n  })), /*#__PURE__*/React.createElement(Typography, {\n    variant: \"subtitle2\",\n    gutterBottom: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 459,\n      columnNumber: 33\n    }\n  }, \"Temp: \", item.main.temp, \"\\u2103\"), /*#__PURE__*/React.createElement(\"img\", {\n    src: `http://openweathermap.org/img/w/${item.weather[0].icon}.png`,\n    alt: \"icon\",\n    width: \"60\",\n    height: \"50\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 462,\n      columnNumber: 33\n    }\n  }), /*#__PURE__*/React.createElement(Typography, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 468,\n      columnNumber: 33\n    }\n  }, \"Weather description :\"), item.weather[0].description))))))))))))));\n}\n\nexport default App;\n/* const getWeather = async () => {\n  const api = await fetch(`https://samples.openweathermap.org/data/2.5/forecast/daily?id=524901&appid=b1b15e88fa797225412429c1c50c122a1`);\n  const data = await api.json();\n  console.log(data);\n}\n*/\n\n/*\n  const getWeather = async () => {\n    const api = await fetch(\n      `https://api.openweathermap.org/data/2.5/weather?q=Kiev,ua&appid=62029f0d3701271a5e50142b280915f0&units=metric\n`\n    );\n    const data = await api.json();\n    console.log(data);\n\n      fetch(\n    `http://api.openweathermap.org/data/2.5/weather?q=moscow&appid=62029f0d3701271a5e50142b280915f0\n`\n  )\n    .then((res) => res.json())\n    .then((result) => {\n      setWeather({ ...weather, datas: result });\n      console.log(result);\n    });\n  };*/\n\n/*\n<Grid item>\n          <Card className={classes.root} onClick={handleOpen}>\n            <CardContent>\n              <Typography\n                className={classes.title}\n                color=\"textSecondary\"\n                gutterBottom\n              >\n                Current weather in\n              </Typography>\n              <Typography variant=\"h5\" component=\"h2\">\n                {paris.datasp.name}\n              </Typography>\n               <img\n                src={`http://openweathermap.org/img/w/${icon}.png`}\n                alt=\"icon\"\n                width=\"60\"\n                height=\"50\"\n              />\n              <Typography>Temperature: {cels}℃</Typography>\n              <Typography>Description: {sky}</Typography>\n            </CardContent>\n          </Card>\n          <Modal\n            aria-labelledby=\"transition-modal-title\"\n            aria-describedby=\"transition-modal-description\"\n            className={classes.modal}\n            open={open}\n            onClose={handleClose}\n            closeAfterTransition\n            BackdropComponent={Backdrop}\n            BackdropProps={{\n              timeout: 500,\n            }}\n          >\n            <Fade in={open}>\n              <div className={classes.paper}>\n                <Card className={classes.modalCard} onClick={handleOpen}>\n                  <CardContent>\n                    <Typography\n                      className={classes.title}\n                      color=\"textSecondary\"\n                      gutterBottom\n                    >\n                      More weather information{\" \"}\n                    </Typography>\n                    <Typography variant=\"h5\" component=\"h2\">\n                      {paris.datasp.name}\n                    </Typography>\n                    <Typography>\n                      {paris.datafp.slice(0, 5).map((item) => (\n                        <div>\n                          <Typography variant=\"h6\" gutterBottom>\n                            {timeCity(item.dt)} <br />\n                          </Typography>\n                          <Typography variant=\"subtitle2\" gutterBottom>\n                            Temp: {item.main.temp}℃\n                          </Typography>\n                          <img\n                            src={`http://openweathermap.org/img/w/${item.weather[0].icon}.png`}\n                            alt=\"icon\"\n                            width=\"60\"\n                            height=\"50\"\n                          />\n                          <Typography>Weather description :</Typography>\n                          {item.weather[0].description}\n                        </div>\n                      ))}\n                    </Typography>\n                  </CardContent>\n                </Card>\n              </div>\n            </Fade>\n          </Modal>\n        </Grid>\n        <Grid item>\n          <Card className={classes.root} onClick={handleOpen}>\n            <CardContent>\n              <Typography\n                className={classes.title}\n                color=\"textSecondary\"\n                gutterBottom\n              >\n                Current weather in\n              </Typography>\n              <Typography variant=\"h5\" component=\"h2\">\n                {paris.datasp.name}\n              </Typography>\n               <img\n                src={`http://openweathermap.org/img/w/${icon}.png`}\n                alt=\"icon\"\n                width=\"60\"\n                height=\"50\"\n              />\n              <Typography>Temperature: {cels}℃</Typography>\n              <Typography>Description: {sky}</Typography>\n              <Typography>\n                {paris.datafp.slice(0, 5).map((item) => (\n                  <div>\n                    {timeCity(item.dt)} <br />\n                  </div>\n                ))}\n              </Typography>\n            </CardContent>\n          </Card>\n          <Modal\n            aria-labelledby=\"transition-modal-title\"\n            aria-describedby=\"transition-modal-description\"\n            className={classes.modal}\n            open={open}\n            onClose={handleClose}\n            closeAfterTransition\n            BackdropComponent={Backdrop}\n            BackdropProps={{\n              timeout: 500,\n            }}\n          >\n            <Fade in={open}>\n              <div className={classes.paper}>\n                <Card className={classes.modalCard} onClick={handleOpen}>\n                  <CardContent>\n                    <Typography\n                      className={classes.title}\n                      color=\"textSecondary\"\n                      gutterBottom\n                    >\n                      More weather information{\" \"}\n                    </Typography>\n                    <Typography variant=\"h5\" component=\"h2\">\n                      {paris.datasp.name}\n                    </Typography>\n                    <Typography>\n                      {paris.datafp.slice(0, 5).map((item) => (\n                        <div>\n                          <Typography variant=\"h6\" gutterBottom>\n                            {timeCity(item.dt)} <br />\n                          </Typography>\n                          <Typography variant=\"subtitle2\" gutterBottom>\n                            Temp: {item.main.temp}℃\n                          </Typography>\n                          <img\n                            src={`http://openweathermap.org/img/w/${item.weather[0].icon}.png`}\n                            alt=\"icon\"\n                            width=\"60\"\n                            height=\"50\"\n                          />\n                          <Typography>Weather description :</Typography>\n                          {item.weather[0].description}\n                        </div>\n                      ))}\n                    </Typography>\n                  </CardContent>\n                </Card>\n              </div>\n            </Fade>\n          </Modal>\n        </Grid>\n*/","map":{"version":3,"sources":["/Users/ali/Documents/roseltorg/src/App.js"],"names":["React","useState","useEffect","HideAppBar","CityCard","Grid","makeStyles","Card","CardContent","Typography","Modal","Backdrop","Fade","useStyles","theme","root","minWidth","maxWidth","cursor","marginTop","borderRadius","boxShadow","bullet","display","margin","transform","title","fontSize","pos","marginBottom","modal","alignItems","justifyContent","paper","backgroundColor","palette","background","border","shadows","outline","modalCard","width","App","moscow","setMoscow","datasm","getWeatherMoscow","api","fetch","forecastapi","datafore","json","data","datafm","temp","main","sky","weather","description","icon","console","log","london","setLondon","datasl","templ","skyl","timel","iconl","getWeatherLondon","datafl","list","slice","map","item","paris","setParis","datasp","datafp","time","getWeatherParis","dt","classes","open","setOpen","handleOpen","handleClose","cels","Math","round","celsl","timeCity","times","a","Date","months","year","getFullYear","month","getMonth","date","getDate","hour","getHours","min","getMinutes","sec","getSeconds","name","timeout","marginLeft"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport HideAppBar from \"./components/AppBar\";\nimport CityCard from \"./components/CityCard\";\nimport Grid from \"@material-ui/core/Grid\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Card from \"@material-ui/core/Card\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Modal from \"@material-ui/core/Modal\";\nimport Backdrop from \"@material-ui/core/Backdrop\";\nimport Fade from \"@material-ui/core/Fade\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    minWidth: 275,\n    maxWidth: 290,\n    cursor: \"pointer\",\n    marginTop: 20,\n    borderRadius: 12,\n    boxShadow: \"0 10px 45px rgba(0,0,0,.08), 0 5px 10px rgba(0,0,0,.05)\",\n  },\n  bullet: {\n    display: \"inline-block\",\n    margin: \"0 2px\",\n    transform: \"scale(0.8)\",\n  },\n  title: {\n    fontSize: 14,\n  },\n  pos: {\n    marginBottom: 12,\n  },\n  modal: {\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n  },\n  paper: {\n    backgroundColor: theme.palette.background.paper,\n    border: \"1px solid #48484A\",\n    borderRadius: 4,\n    maxWidth: 1000,\n    boxShadow: theme.shadows[5],\n    outline: \"none\",\n  },\n  modalCard: {\n    width: 420,\n    boxShadow: \"0 10px 45px rgba(0,0,0,.08), 0 5px 10px rgba(0,0,0,.05)\",\n  },\n}));\n\nfunction App() {\n  const [moscow, setMoscow] = useState({\n    datasm: [],\n  });\n\n  const { datasm } = moscow;\n\n  const getWeatherMoscow = async () => {\n    const api = await fetch(\n      `http://api.openweathermap.org/data/2.5/weather?q=moscow&appid=62029f0d3701271a5e50142b280915f0\n`\n    );\n    const forecastapi = await fetch(\n      `https://api.openweathermap.org/data/2.5/forecast?q=moscow&units=metric&appid=62029f0d3701271a5e50142b280915f0`\n    );\n\n    const datafore = await forecastapi.json();\n    const data = await api.json();\n    setMoscow({\n      ...moscow,\n      datasm: data,\n      datafm: datafore,\n      temp: data.main.temp,\n      sky: data.weather[0].description,\n      icon: data.weather[0].icon,\n    });\n    console.log(data);\n  };\n\n  const [london, setLondon] = useState({\n    datasl: [],\n    templ: [],\n    skyl: [],\n    icon: '',\n    timel: ''\n\n  });\n  \n\n  const { datasl, templ, skyl, iconl, timel } = london;\n\n  const getWeatherLondon = async () => {\n    const api = await fetch(\n      `http://api.openweathermap.org/data/2.5/weather?q=london&appid=62029f0d3701271a5e50142b280915f0\n`\n    );\n    const forecastapi = await fetch(\n      `https://api.openweathermap.org/data/2.5/forecast?q=moscow&units=metric&appid=62029f0d3701271a5e50142b280915f0`\n    );\n    const data = await api.json();\n    const datafore = await forecastapi.json();\n\n    setLondon({\n      ...london,\n      datasl: data,\n      datafl: datafore.list.slice(0, 5).map((item) => <a>{item.main.temp}</a>),\n      templ: data.main.temp,\n      skyl: data.weather[0].description,\n      iconl: data.weather[0].icon,\n    });\n    console.log(data);\n  };\n\n  const [paris, setParis] = useState({\n    datasp: [],\n    datafp: [],\n    temp: [],\n    sky: [],\n    icon: \"\",\n    time: \"\",\n  });\n\n  const { datasp, datafp, temp, sky, icon, time } = paris;\n\n  useEffect(() => {\n    getWeatherParis();\n    getWeatherMoscow();\n    getWeatherLondon();\n  }, []);\n\n\n  const getWeatherParis = async () => {\n    const api = await fetch(\n      `http://api.openweathermap.org/data/2.5/weather?q=sydney&appid=62029f0d3701271a5e50142b280915f0\n`\n    );\n    const forecastapi = await fetch(\n      `https://api.openweathermap.org/data/2.5/forecast?q=moscow&units=metric&appid=62029f0d3701271a5e50142b280915f0`\n    );\n\n    const data = await api.json();\n    const datafore = await forecastapi.json();\n    setParis({\n      ...paris,\n      datasp: data,\n      datafp: datafore.list,\n      temp: data.main.temp,\n      sky: data.weather[0].description,\n      icon: data.weather[0].icon,\n      time: data.dt,\n    });\n\n    console.log(data);\n  };\n\n  const classes = useStyles();\n\n  const [open, setOpen] = React.useState(false);\n\n  const handleOpen = () => {\n    setOpen(true);\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  const cels = Math.round(temp - 273.16);\n  const celsl = Math.round(templ - 273.16);\n\n  const timeCity = (times) => {\n    let a = new Date(times * 1000);\n    let months = [\n      \"Jan\",\n      \"Feb\",\n      \"Mar\",\n      \"Apr\",\n      \"May\",\n      \"Jun\",\n      \"Jul\",\n      \"Aug\",\n      \"Sep\",\n      \"Oct\",\n      \"Nov\",\n      \"Dec\",\n    ];\n    let year = a.getFullYear();\n    let month = months[a.getMonth()];\n    let date = a.getDate();\n    let hour = a.getHours();\n    let min = a.getMinutes();\n    let sec = a.getSeconds();\n    let time =\n      date + \" \" + month + \" \" + year + \" \" + hour + \":\" + min + \":\" + sec;\n    return time;\n  };\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <HideAppBar />\n      </header>\n\n      <div className=\"Layout\">\n        <Grid\n          container\n          direction=\"row\"\n          justify=\"center\"\n          alignItems=\"center\"\n          spacing={7}\n        >\n          <Grid item>\n            <Card className={classes.root} onClick={handleOpen}>\n              <CardContent>\n                <Typography\n                  className={classes.title}\n                  color=\"textSecondary\"\n                  gutterBottom\n                >\n                  Current weather in\n                </Typography>\n                <Typography variant=\"h5\" component=\"h2\">\n                  {paris.datasp.name}\n                </Typography>\n\n                <img\n                  src={`http://openweathermap.org/img/w/${icon}.png`}\n                  alt=\"icon\"\n                  width=\"60\"\n                  height=\"50\"\n                />\n                <Typography>Temperature: {cels}℃</Typography>\n                <Typography>Description: {sky}</Typography>\n              </CardContent>\n            </Card>\n            <Modal\n              aria-labelledby=\"transition-modal-title\"\n              aria-describedby=\"transition-modal-description\"\n              className={classes.modal}\n              open={open}\n              onClose={handleClose}\n              closeAfterTransition\n              BackdropComponent={Backdrop}\n              BackdropProps={{\n                timeout: 500,\n              }}\n            >\n              <Fade in={open}>\n                <div className={classes.paper}>\n                  <Card className={classes.modalCard} onClick={handleOpen}>\n                    <CardContent>\n                      <Typography\n                        className={classes.title}\n                        color=\"textSecondary\"\n                        gutterBottom\n                      >\n                        More weather information{\" \"}\n                      </Typography>\n                      <Typography variant=\"h5\" component=\"h2\">\n                        {paris.datasp.name}\n                      </Typography>\n                      <Typography>\n                        <Grid container direction=\"row\" spacing={2}>\n                          {paris.datafp.slice(0, 4).map((item) => (\n                            <Grid item>\n                              <div\n                                style={{\n                                  marginTop: 20,\n                                  marginLeft: 15,\n                                  borderRadius: 12,\n                                  width: 160,\n                                  boxShadow:\n                                    \"0 10px 45px rgba(0,0,0,.08), 0 5px 10px rgba(0,0,0,.05)\",\n                                }}\n                              >\n                                <Typography variant=\"h6\" gutterBottom>\n                                  {timeCity(item.dt)} <br />\n                                </Typography>\n                                <Typography variant=\"subtitle2\" gutterBottom>\n                                  Temp: {item.main.temp}℃\n                                </Typography>\n                                <img\n                                  src={`http://openweathermap.org/img/w/${item.weather[0].icon}.png`}\n                                  alt=\"icon\"\n                                  width=\"60\"\n                                  height=\"50\"\n                                />\n                                <Typography>Weather description :</Typography>\n                                {item.weather[0].description}\n                              </div>\n                            </Grid>\n                          ))}\n                        </Grid>\n                      </Typography>\n                    </CardContent>\n                  </Card>\n                </div>\n              </Fade>\n            </Modal>\n          </Grid>\n          <Grid item>\n            <Card className={classes.root} onClick={handleOpen}>\n              <CardContent>\n                <Typography\n                  className={classes.title}\n                  color=\"textSecondary\"\n                  gutterBottom\n                >\n                  Current weather in\n                </Typography>\n                <Typography variant=\"h5\" component=\"h2\">\n                  {london.datasl.name}\n                </Typography>\n\n                <img\n                  src={`http://openweathermap.org/img/w/${iconl}.png`}\n                  alt=\"icon\"\n                  width=\"60\"\n                  height=\"50\"\n                />\n                <Typography>Temperature: {celsl}℃</Typography>\n                <Typography>Description: {skyl}</Typography>\n              </CardContent>\n            </Card>\n            <Modal\n              aria-labelledby=\"transition-modal-title\"\n              aria-describedby=\"transition-modal-description\"\n              className={classes.modal}\n              open={open}\n              onClose={handleClose}\n              closeAfterTransition\n              BackdropComponent={Backdrop}\n              BackdropProps={{\n                timeout: 500,\n              }}\n            >\n              <Fade in={open}>\n                <div className={classes.paper}>\n                  <Card className={classes.modalCard} onClick={handleOpen}>\n                    <CardContent>\n                      <Typography\n                        className={classes.title}\n                        color=\"textSecondary\"\n                        gutterBottom\n                      >\n                        More weather information{\" \"}\n                      </Typography>\n                      <Typography variant=\"h5\" component=\"h2\">\n                        {paris.datasp.name}\n                      </Typography>\n                      <Typography>\n                        <Grid container direction=\"row\" spacing={2}>\n                          {paris.datafp.slice(0, 4).map((item) => (\n                            <Grid item>\n                              <div\n                                style={{\n                                  marginTop: 20,\n                                  marginLeft: 15,\n                                  borderRadius: 12,\n                                  width: 160,\n                                  boxShadow:\n                                    \"0 10px 45px rgba(0,0,0,.08), 0 5px 10px rgba(0,0,0,.05)\",\n                                }}\n                              >\n                                <Typography variant=\"h6\" gutterBottom>\n                                  {timeCity(item.dt)} <br />\n                                </Typography>\n                                <Typography variant=\"subtitle2\" gutterBottom>\n                                  Temp: {item.main.temp}℃\n                                </Typography>\n                                <img\n                                  src={`http://openweathermap.org/img/w/${item.weather[0].icon}.png`}\n                                  alt=\"icon\"\n                                  width=\"60\"\n                                  height=\"50\"\n                                />\n                                <Typography>Weather description :</Typography>\n                                {item.weather[0].description}\n                              </div>\n                            </Grid>\n                          ))}\n                        </Grid>\n                      </Typography>\n                    </CardContent>\n                  </Card>\n                </div>\n              </Fade>\n            </Modal>\n          </Grid>\n          <Grid item>\n            <Card className={classes.root} onClick={handleOpen}>\n              <CardContent>\n                <Typography\n                  className={classes.title}\n                  color=\"textSecondary\"\n                  gutterBottom\n                >\n                  Current weather in\n                </Typography>\n                <Typography variant=\"h5\" component=\"h2\">\n                  {paris.datasp.name}\n                </Typography>\n\n                <img\n                  src={`http://openweathermap.org/img/w/${icon}.png`}\n                  alt=\"icon\"\n                  width=\"60\"\n                  height=\"50\"\n                />\n                <Typography>Temperature: {cels}℃</Typography>\n                <Typography>Description: {sky}</Typography>\n              </CardContent>\n            </Card>\n            <Modal\n              aria-labelledby=\"transition-modal-title\"\n              aria-describedby=\"transition-modal-description\"\n              className={classes.modal}\n              open={open}\n              onClose={handleClose}\n              closeAfterTransition\n              BackdropComponent={Backdrop}\n              BackdropProps={{\n                timeout: 500,\n              }}\n            >\n              <Fade in={open}>\n                <div className={classes.paper}>\n                  <Card className={classes.modalCard} onClick={handleOpen}>\n                    <CardContent>\n                      <Typography\n                        className={classes.title}\n                        color=\"textSecondary\"\n                        gutterBottom\n                      >\n                        More weather information{\" \"}\n                      </Typography>\n                      <Typography variant=\"h5\" component=\"h2\">\n                        {paris.datasp.name}\n                      </Typography>\n                      <Typography>\n                        <Grid container direction=\"row\" spacing={2}>\n                          {paris.datafp.slice(0, 4).map((item) => (\n                            <Grid item>\n                              <div\n                                style={{\n                                  marginTop: 20,\n                                  marginLeft: 15,\n                                  borderRadius: 12,\n                                  width: 160,\n                                  boxShadow:\n                                    \"0 10px 45px rgba(0,0,0,.08), 0 5px 10px rgba(0,0,0,.05)\",\n                                }}\n                              >\n                                <Typography variant=\"h6\" gutterBottom>\n                                  {timeCity(item.dt)} <br />\n                                </Typography>\n                                <Typography variant=\"subtitle2\" gutterBottom>\n                                  Temp: {item.main.temp}℃\n                                </Typography>\n                                <img\n                                  src={`http://openweathermap.org/img/w/${item.weather[0].icon}.png`}\n                                  alt=\"icon\"\n                                  width=\"60\"\n                                  height=\"50\"\n                                />\n                                <Typography>Weather description :</Typography>\n                                {item.weather[0].description}\n                              </div>\n                            </Grid>\n                          ))}\n                        </Grid>\n                      </Typography>\n                    </CardContent>\n                  </Card>\n                </div>\n              </Fade>\n            </Modal>\n          </Grid>\n        </Grid>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n\n/* const getWeather = async () => {\n  const api = await fetch(`https://samples.openweathermap.org/data/2.5/forecast/daily?id=524901&appid=b1b15e88fa797225412429c1c50c122a1`);\n  const data = await api.json();\n  console.log(data);\n}\n*/\n\n/*\n  const getWeather = async () => {\n    const api = await fetch(\n      `https://api.openweathermap.org/data/2.5/weather?q=Kiev,ua&appid=62029f0d3701271a5e50142b280915f0&units=metric\n`\n    );\n    const data = await api.json();\n    console.log(data);\n\n      fetch(\n    `http://api.openweathermap.org/data/2.5/weather?q=moscow&appid=62029f0d3701271a5e50142b280915f0\n`\n  )\n    .then((res) => res.json())\n    .then((result) => {\n      setWeather({ ...weather, datas: result });\n      console.log(result);\n    });\n  };*/\n\n\n\n  /*\n  <Grid item>\n            <Card className={classes.root} onClick={handleOpen}>\n              <CardContent>\n                <Typography\n                  className={classes.title}\n                  color=\"textSecondary\"\n                  gutterBottom\n                >\n                  Current weather in\n                </Typography>\n                <Typography variant=\"h5\" component=\"h2\">\n                  {paris.datasp.name}\n                </Typography>\n\n                <img\n                  src={`http://openweathermap.org/img/w/${icon}.png`}\n                  alt=\"icon\"\n                  width=\"60\"\n                  height=\"50\"\n                />\n                <Typography>Temperature: {cels}℃</Typography>\n                <Typography>Description: {sky}</Typography>\n              </CardContent>\n            </Card>\n            <Modal\n              aria-labelledby=\"transition-modal-title\"\n              aria-describedby=\"transition-modal-description\"\n              className={classes.modal}\n              open={open}\n              onClose={handleClose}\n              closeAfterTransition\n              BackdropComponent={Backdrop}\n              BackdropProps={{\n                timeout: 500,\n              }}\n            >\n              <Fade in={open}>\n                <div className={classes.paper}>\n                  <Card className={classes.modalCard} onClick={handleOpen}>\n                    <CardContent>\n                      <Typography\n                        className={classes.title}\n                        color=\"textSecondary\"\n                        gutterBottom\n                      >\n                        More weather information{\" \"}\n                      </Typography>\n                      <Typography variant=\"h5\" component=\"h2\">\n                        {paris.datasp.name}\n                      </Typography>\n                      <Typography>\n                        {paris.datafp.slice(0, 5).map((item) => (\n                          <div>\n                            <Typography variant=\"h6\" gutterBottom>\n                              {timeCity(item.dt)} <br />\n                            </Typography>\n                            <Typography variant=\"subtitle2\" gutterBottom>\n                              Temp: {item.main.temp}℃\n                            </Typography>\n                            <img\n                              src={`http://openweathermap.org/img/w/${item.weather[0].icon}.png`}\n                              alt=\"icon\"\n                              width=\"60\"\n                              height=\"50\"\n                            />\n                            <Typography>Weather description :</Typography>\n                            {item.weather[0].description}\n                          </div>\n                        ))}\n                      </Typography>\n                    </CardContent>\n                  </Card>\n                </div>\n              </Fade>\n            </Modal>\n          </Grid>\n          <Grid item>\n            <Card className={classes.root} onClick={handleOpen}>\n              <CardContent>\n                <Typography\n                  className={classes.title}\n                  color=\"textSecondary\"\n                  gutterBottom\n                >\n                  Current weather in\n                </Typography>\n                <Typography variant=\"h5\" component=\"h2\">\n                  {paris.datasp.name}\n                </Typography>\n\n                <img\n                  src={`http://openweathermap.org/img/w/${icon}.png`}\n                  alt=\"icon\"\n                  width=\"60\"\n                  height=\"50\"\n                />\n                <Typography>Temperature: {cels}℃</Typography>\n                <Typography>Description: {sky}</Typography>\n                <Typography>\n                  {paris.datafp.slice(0, 5).map((item) => (\n                    <div>\n                      {timeCity(item.dt)} <br />\n                    </div>\n                  ))}\n                </Typography>\n              </CardContent>\n            </Card>\n            <Modal\n              aria-labelledby=\"transition-modal-title\"\n              aria-describedby=\"transition-modal-description\"\n              className={classes.modal}\n              open={open}\n              onClose={handleClose}\n              closeAfterTransition\n              BackdropComponent={Backdrop}\n              BackdropProps={{\n                timeout: 500,\n              }}\n            >\n              <Fade in={open}>\n                <div className={classes.paper}>\n                  <Card className={classes.modalCard} onClick={handleOpen}>\n                    <CardContent>\n                      <Typography\n                        className={classes.title}\n                        color=\"textSecondary\"\n                        gutterBottom\n                      >\n                        More weather information{\" \"}\n                      </Typography>\n                      <Typography variant=\"h5\" component=\"h2\">\n                        {paris.datasp.name}\n                      </Typography>\n                      <Typography>\n                        {paris.datafp.slice(0, 5).map((item) => (\n                          <div>\n                            <Typography variant=\"h6\" gutterBottom>\n                              {timeCity(item.dt)} <br />\n                            </Typography>\n                            <Typography variant=\"subtitle2\" gutterBottom>\n                              Temp: {item.main.temp}℃\n                            </Typography>\n                            <img\n                              src={`http://openweathermap.org/img/w/${item.weather[0].icon}.png`}\n                              alt=\"icon\"\n                              width=\"60\"\n                              height=\"50\"\n                            />\n                            <Typography>Weather description :</Typography>\n                            {item.weather[0].description}\n                          </div>\n                        ))}\n                      </Typography>\n                    </CardContent>\n                  </Card>\n                </div>\n              </Fade>\n            </Modal>\n          </Grid>\n  */"]},"metadata":{},"sourceType":"module"}