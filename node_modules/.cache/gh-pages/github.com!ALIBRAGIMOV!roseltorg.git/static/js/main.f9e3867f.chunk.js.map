{"version":3,"sources":["components/AppBar.jsx","App.js","serviceWorker.js","index.js"],"names":["HideOnScroll","props","children","window","trigger","useScrollTrigger","target","undefined","Slide","appear","direction","in","HideAppBar","Fragment","CssBaseline","AppBar","style","backgroundColor","opacity","Toolbar","justifyContent","Typography","variant","marginLeft","useStyles","makeStyles","theme","root","minWidth","maxWidth","cursor","marginTop","borderRadius","boxShadow","bullet","display","margin","transform","title","fontSize","pos","marginBottom","modal","alignItems","paper","palette","background","shadows","outline","modalCard","width","App","useState","datasm","datafm","tempm","skym","iconm","timem","moscow","setMoscow","getWeatherMoscow","a","fetch","api","forecastapi","json","datafore","data","list","main","temp","weather","description","icon","datasl","datafl","templ","skyl","timel","london","setLondon","getWeatherLondon","iconl","datasp","datafp","sky","time","paris","setParis","useEffect","getWeatherParis","dt","classes","React","open","setOpen","openTwo","setOpenTwo","openThr","setOpenThr","handleOpen","handleOpenTwo","handleOpenThr","cels","Math","round","celsl","celsm","timeCity","times","Date","year","getFullYear","month","getMonth","date","getDate","hour","getHours","min","getMinutes","getSeconds","className","Grid","container","justify","spacing","item","Card","onClick","CardContent","color","gutterBottom","component","name","src","alt","height","Modal","aria-labelledby","aria-describedby","onClose","closeAfterTransition","BackdropComponent","Backdrop","BackdropProps","timeout","Fade","slice","map","textAlign","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.f9e3867f.chunk.js","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport Typography from \"@material-ui/core/Typography\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport useScrollTrigger from \"@material-ui/core/useScrollTrigger\";\nimport Box from \"@material-ui/core/Box\";\nimport Container from \"@material-ui/core/Container\";\nimport Slide from \"@material-ui/core/Slide\";\nimport WbSunnyIcon from \"@material-ui/icons/WbSunny\";\n\n\nfunction HideOnScroll(props) {\n  const { children, window } = props;\n  // Note that you normally won't need to set the window ref as useScrollTrigger\n  // will default to window.\n  // This is only being set here because the demo is in an iframe.\n  const trigger = useScrollTrigger({ target: window ? window() : undefined });\n\n  return (\n    <Slide appear={false} direction=\"down\" in={!trigger}>\n      {children}\n    </Slide>\n  );\n}\n\nHideOnScroll.propTypes = {\n  children: PropTypes.element.isRequired,\n  /**\n   * Injected by the documentation to work in an iframe.\n   * You won't need it on your project.\n   */\n  window: PropTypes.func,\n};\n\nexport default function HideAppBar(props) {\n  return (\n    <React.Fragment>\n      <CssBaseline />\n      <HideOnScroll {...props}>\n        <AppBar style={{ backgroundColor: \"#48484A\",     opacity: 0.99 }}>\n          <Toolbar style={{ justifyContent: \"center\" }}>\n            <Typography variant=\"h5\">Weather</Typography>\n            <WbSunnyIcon style={{marginLeft: 10}} />\n          </Toolbar>\n        </AppBar>\n      </HideOnScroll>\n      <Toolbar />\n    </React.Fragment>\n  );\n}\n","import React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport HideAppBar from \"./components/AppBar\";\nimport Grid from \"@material-ui/core/Grid\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Card from \"@material-ui/core/Card\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Modal from \"@material-ui/core/Modal\";\nimport Backdrop from \"@material-ui/core/Backdrop\";\nimport Fade from \"@material-ui/core/Fade\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    minWidth: 275,\n    maxWidth: 290,\n    cursor: \"pointer\",\n    marginTop: 20,\n    borderRadius: 12,\n    boxShadow: \"0 10px 45px rgba(0,0,0,.08), 0 5px 10px rgba(0,0,0,.05)\",\n  },\n  bullet: {\n    display: \"inline-block\",\n    margin: \"0 2px\",\n    transform: \"scale(0.8)\",\n  },\n  title: {\n    fontSize: 14,\n  },\n  pos: {\n    marginBottom: 12,\n  },\n  modal: {\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n  },\n  paper: {\n    backgroundColor: theme.palette.background.paper,\n    borderRadius: 12,\n    maxWidth: 1000,\n    boxShadow: theme.shadows[5],\n    outline: \"none\",\n  },\n  modalCard: {\n    width: 400,\n    boxShadow: \"0 10px 45px rgba(0,0,0,.08), 0 5px 10px rgba(0,0,0,.05)\",\n  },\n}));\n\nfunction App() {\n  const [moscow, setMoscow] = useState({\n    datasm: [],\n    datafm: [],\n    tempm: [],\n    skym: [],\n    iconm: \"\",\n    timem: \"\",\n  });\n\n  const { datasm, tempm, skym, iconm, timem } = moscow;\n\n  const getWeatherMoscow = async () => {\n    const api = await fetch(\n      `http://api.openweathermap.org/data/2.5/weather?q=moscow&appid=62029f0d3701271a5e50142b280915f0\n`\n    );\n    const forecastapi = await fetch(\n      `https://api.openweathermap.org/data/2.5/forecast?q=moscow&units=metric&appid=62029f0d3701271a5e50142b280915f0`\n    );\n\n    const datafore = await forecastapi.json();\n    const data = await api.json();\n    setMoscow({\n      ...moscow,\n      datasm: data,\n      datafm: datafore.list,\n      tempm: data.main.temp,\n      skym: data.weather[0].description,\n      iconm: data.weather[0].icon,\n    });\n  };\n\n  const [london, setLondon] = useState({\n    datasl: [],\n    datafl: [],\n    templ: [],\n    skyl: [],\n    icon: \"\",\n    timel: \"\",\n  });\n\n  const { datasl, datafl, templ, skyl, iconl, timel } = london;\n\n  const getWeatherLondon = async () => {\n    const api = await fetch(\n      `http://api.openweathermap.org/data/2.5/weather?q=london&appid=62029f0d3701271a5e50142b280915f0\n`\n    );\n    const forecastapi = await fetch(\n      `https://api.openweathermap.org/data/2.5/forecast?q=london&units=metric&appid=62029f0d3701271a5e50142b280915f0`\n    );\n    const data = await api.json();\n    const datafore = await forecastapi.json();\n\n    setLondon({\n      ...london,\n      datasl: data,\n      datafl: datafore.list,\n      templ: data.main.temp,\n      skyl: data.weather[0].description,\n      iconl: data.weather[0].icon,\n    });\n  };\n\n  const [paris, setParis] = useState({\n    datasp: [],\n    datafp: [],\n    temp: [],\n    sky: [],\n    icon: \"\",\n    time: \"\",\n  });\n\n  const { datasp, datafp, temp, sky, icon, time } = paris;\n\n  useEffect(() => {\n    getWeatherParis();\n    getWeatherMoscow();\n    getWeatherLondon();\n  }, []);\n\n  const getWeatherParis = async () => {\n    const api = await fetch(\n      `http://api.openweathermap.org/data/2.5/weather?q=paris&appid=62029f0d3701271a5e50142b280915f0\n`\n    );\n    const forecastapi = await fetch(\n      `https://api.openweathermap.org/data/2.5/forecast?q=paris&units=metric&appid=62029f0d3701271a5e50142b280915f0`\n    );\n\n    const data = await api.json();\n    const datafore = await forecastapi.json();\n    setParis({\n      ...paris,\n      datasp: data,\n      datafp: datafore.list,\n      temp: data.main.temp,\n      sky: data.weather[0].description,\n      icon: data.weather[0].icon,\n      time: data.dt,\n    });\n  };\n\n  const classes = useStyles();\n\n  const [open, setOpen] = React.useState(false);\n  const [openTwo, setOpenTwo] = React.useState(false);\n  const [openThr, setOpenThr] = React.useState(false);\n\n  const handleOpen = () => {\n    setOpen(true);\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  const handleOpenTwo = () => {\n    setOpenTwo(true);\n  };\n\n  const handleCloseTwo = () => {\n    setOpenTwo(false);\n  };\n\n  const handleOpenThr = () => {\n    setOpenThr(true);\n  };\n\n  const handlCloseThr = () => {\n    setOpenThr(false);\n  };\n\n  const cels = Math.round(temp - 273.16);\n  const celsl = Math.round(templ - 273.16);\n  const celsm = Math.round(tempm - 273.16);\n\n  const timeCity = (times) => {\n    let a = new Date(times * 1000);\n    let months = [\n      \"Jan\",\n      \"Feb\",\n      \"Mar\",\n      \"Apr\",\n      \"May\",\n      \"Jun\",\n      \"Jul\",\n      \"Aug\",\n      \"Sep\",\n      \"Oct\",\n      \"Nov\",\n      \"Dec\",\n    ];\n    let year = a.getFullYear();\n    let month = months[a.getMonth()];\n    let date = a.getDate();\n    let hour = a.getHours();\n    let min = a.getMinutes();\n    let sec = a.getSeconds();\n    let time =\n      \"🗓\" +\n      date +\n      \" \" +\n      month +\n      \" \" +\n      year +\n      \"🕓\" +\n      \" \" +\n      hour +\n      \":\" +\n      min +\n      \"0\";\n    return time;\n  };\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <HideAppBar />\n      </header>\n\n      <div className=\"Layout\">\n        <Grid\n          container\n          direction=\"row\"\n          justify=\"center\"\n          alignItems=\"center\"\n          spacing={7}\n        >\n          <Grid item>\n            <Card className={classes.root} onClick={handleOpen}>\n              <CardContent>\n                <Typography\n                  className={classes.title}\n                  color=\"textSecondary\"\n                  gutterBottom\n                >\n                  Current weather in\n                </Typography>\n                <Typography variant=\"h5\" component=\"h2\">\n                  {paris.datasp.name}\n                </Typography>\n\n                <img\n                  src={`http://openweathermap.org/img/w/${icon}.png`}\n                  alt=\"icon\"\n                  width=\"60\"\n                  height=\"50\"\n                />\n                <Typography>Temperature: {cels}℃</Typography>\n                <Typography>Description: {sky}</Typography>\n              </CardContent>\n            </Card>\n            <Modal\n              aria-labelledby=\"transition-modal-title\"\n              aria-describedby=\"transition-modal-description\"\n              className={classes.modal}\n              open={open}\n              onClose={handleClose}\n              closeAfterTransition\n              BackdropComponent={Backdrop}\n              BackdropProps={{\n                timeout: 500,\n              }}\n            >\n              <Fade in={open}>\n                <div className={classes.paper}>\n                  <Card className={classes.modalCard} onClick={handleOpen}>\n                    <CardContent>\n                      <Typography\n                        className={classes.title}\n                        color=\"textSecondary\"\n                        gutterBottom\n                      >\n                        More weather information{\" \"}\n                      </Typography>\n                      <Typography variant=\"h5\" component=\"h2\">\n                        {paris.datasp.name}\n                      </Typography>\n                      <Typography>\n                        <Grid container direction=\"row\" spacing={2}>\n                          {paris.datafp.slice(0, 4).map((item) => (\n                            <Grid item>\n                              <div\n                                style={{\n                                  marginTop: 20,\n                                  marginLeft: 15,\n                                  borderRadius: 12,\n                                  width: 150,\n                                  boxShadow:\n                                    \"0 10px 45px rgba(0,0,0,.08), 0 5px 10px rgba(0,0,0,.05)\",\n                                  textAlign: \"center\",\n                                }}\n                              >\n                                <br />\n                                <Typography variant=\"h6\" gutterBottom>\n                                  {timeCity(item.dt)}\n                                </Typography>\n                                <Typography variant=\"subtitle2\" gutterBottom>\n                                  Temp: {item.main.temp}℃\n                                </Typography>\n                                <img\n                                  src={`http://openweathermap.org/img/w/${item.weather[0].icon}.png`}\n                                  alt=\"icon\"\n                                  width=\"60\"\n                                  height=\"50\"\n                                />\n                                <Typography variant=\"subtitle2\" gutterBottom>\n                                  Weather description :\n                                </Typography>\n                                <Typography variant=\"body2\" gutterBottom>\n                                  {item.weather[0].description}\n                                </Typography>\n                              </div>\n                            </Grid>\n                          ))}\n                        </Grid>\n                      </Typography>\n                    </CardContent>\n                  </Card>\n                </div>\n              </Fade>\n            </Modal>\n          </Grid>\n          <Grid item>\n            <Card className={classes.root} onClick={handleOpenTwo}>\n              <CardContent>\n                <Typography\n                  className={classes.title}\n                  color=\"textSecondary\"\n                  gutterBottom\n                >\n                  Current weather in\n                </Typography>\n                <Typography variant=\"h5\" component=\"h2\">\n                  {london.datasl.name}\n                </Typography>\n\n                <img\n                  src={`http://openweathermap.org/img/w/${icon}.png`}\n                  alt=\"icon\"\n                  width=\"60\"\n                  height=\"50\"\n                />\n                <Typography>Temperature: {celsl}℃</Typography>\n                <Typography>Description: {skyl}</Typography>\n              </CardContent>\n            </Card>\n            <Modal\n              aria-labelledby=\"transition-modal-title\"\n              aria-describedby=\"transition-modal-description\"\n              className={classes.modal}\n              open={openTwo}\n              onClose={handleCloseTwo}\n              closeAfterTransition\n              BackdropComponent={Backdrop}\n              BackdropProps={{\n                timeout: 500,\n              }}\n            >\n              <Fade in={openTwo}>\n                <div className={classes.paper}>\n                  <Card className={classes.modalCard} onClick={handleOpenTwo}>\n                    <CardContent>\n                      <Typography\n                        className={classes.title}\n                        color=\"textSecondary\"\n                        gutterBottom\n                      >\n                        More weather information{\" \"}\n                      </Typography>\n                      <Typography variant=\"h5\" component=\"h2\">\n                        {london.datasl.name}\n                      </Typography>\n                      <Typography>\n                        <Grid container direction=\"row\" spacing={2}>\n                          {london.datafl.slice(0, 4).map((item) => (\n                            <Grid item>\n                              <div\n                                style={{\n                                  marginTop: 20,\n                                  marginLeft: 15,\n                                  borderRadius: 12,\n                                  width: 150,\n                                  boxShadow:\n                                    \"0 10px 45px rgba(0,0,0,.08), 0 5px 10px rgba(0,0,0,.05)\",\n                                  textAlign: \"center\",\n                                }}\n                              >\n                                <Typography variant=\"h6\" gutterBottom>\n                                  {timeCity(item.dt)} <br />\n                                </Typography>\n                                <Typography variant=\"subtitle2\" gutterBottom>\n                                  Temp: {item.main.temp}℃\n                                </Typography>\n                                <img\n                                  src={`http://openweathermap.org/img/w/${item.weather[0].icon}.png`}\n                                  alt=\"icon\"\n                                  width=\"60\"\n                                  height=\"50\"\n                                />\n                                <Typography variant=\"subtitle2\" gutterBottom>\n                                  Weather description :\n                                </Typography>\n                                <Typography variant=\"body2\" gutterBottom>\n                                  {item.weather[0].description}\n                                </Typography>\n                              </div>\n                            </Grid>\n                          ))}\n                        </Grid>\n                      </Typography>\n                    </CardContent>\n                  </Card>\n                </div>\n              </Fade>\n            </Modal>\n          </Grid>\n          <Grid item>\n            <Card className={classes.root} onClick={handleOpenThr}>\n              <CardContent>\n                <Typography\n                  className={classes.title}\n                  color=\"textSecondary\"\n                  gutterBottom\n                >\n                  Current weather in\n                </Typography>\n                <Typography variant=\"h5\" component=\"h2\">\n                  {moscow.datasm.name}\n                </Typography>\n\n                <img\n                  src={`http://openweathermap.org/img/w/${icon}.png`}\n                  alt=\"icon\"\n                  width=\"60\"\n                  height=\"50\"\n                />\n                <Typography>Temperature: {celsm}℃</Typography>\n                <Typography>Description: {skym}</Typography>\n              </CardContent>\n            </Card>\n            <Modal\n              aria-labelledby=\"transition-modal-title\"\n              aria-describedby=\"transition-modal-description\"\n              className={classes.modal}\n              open={openThr}\n              onClose={handlCloseThr}\n              closeAfterTransition\n              BackdropComponent={Backdrop}\n              BackdropProps={{\n                timeout: 500,\n              }}\n            >\n              <Fade in={openThr}>\n                <div className={classes.paper}>\n                  <Card className={classes.modalCard} onClick={handleOpenThr}>\n                    <CardContent>\n                      <Typography\n                        className={classes.title}\n                        color=\"textSecondary\"\n                        gutterBottom\n                      >\n                        More weather information{\" \"}\n                      </Typography>\n                      <Typography variant=\"h5\" component=\"h2\">\n                        {moscow.datasm.name}\n                      </Typography>\n                      <Typography>\n                        <Grid container direction=\"row\" spacing={2}>\n                          {moscow.datafm.slice(0, 4).map((item) => (\n                            <Grid item>\n                              <div\n                                style={{\n                                  marginTop: 20,\n                                  marginLeft: 15,\n                                  borderRadius: 12,\n                                  width: 150,\n                                  boxShadow:\n                                    \"0 10px 45px rgba(0,0,0,.08), 0 5px 10px rgba(0,0,0,.05)\",\n                                  textAlign: \"center\",\n                                }}\n                              >\n                                <Typography variant=\"h6\" gutterBottom>\n                                  {timeCity(item.dt)} <br />\n                                </Typography>\n                                <Typography variant=\"subtitle2\" gutterBottom>\n                                  Temp: {item.main.temp}℃\n                                </Typography>\n                                <img\n                                  src={`http://openweathermap.org/img/w/${item.weather[0].icon}.png`}\n                                  alt=\"icon\"\n                                  width=\"60\"\n                                  height=\"50\"\n                                />\n                                <Typography variant=\"subtitle2\" gutterBottom>\n                                  Weather description :\n                                </Typography>\n                                <Typography variant=\"body2\" gutterBottom>\n                                  {item.weather[0].description}\n                                </Typography>\n                              </div>\n                            </Grid>\n                          ))}\n                        </Grid>\n                      </Typography>\n                    </CardContent>\n                  </Card>\n                </div>\n              </Fade>\n            </Modal>\n          </Grid>\n        </Grid>\n      </div>\n    </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}